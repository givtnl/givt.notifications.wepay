# This is a basic workflow to help you get started with Actions

name: Build and deploy Azure function app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set variables for develop
        if: endsWith(github.ref, '/develop')
        run: |
          echo 'FUNCTIONAPP=givt-debug-notifications-wepay' >> $GITHUB_ENV
          echo 'RESOURCE_GROUP=givt-debug-resources'
          echo 'ENVIRONMENT=DEV' >> $GITHUB_ENV
      - name: Set variables for main
        if: endsWith(github.ref, '/main')
        run: |
          echo 'FUNCTIONAPP=givt-production-notifications-wepay' >> $GITHUB_ENV
          echo 'ENVIRONMENT=PROD' >> $GITHUB_ENV
          echo 'RESOURCE_GROUP=givtproductionlinuxfunctions'
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Add private key for private git repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_GIT_SSH_KEY }}
      - name: Accept host bitbucket.org
        run: ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts
      - name: Update submodules
        run: git submodule update --init --recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - name: Build
        run: dotnet build --configuration Release --output ./output
      - name: Install zip
        run: apt-get update && apt-get install -y zip
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      - name: Signin to Azure
        run: |
          az login --service-principal --tenant ${{secrets.AZURE_TENANT_ID_${{env.ENVIRONMENT}}}} -u ${{secrets.AZURE_CLIENT_ID_${{env.ENVIRONMENT}}}} \
            -p ${{secrets.AZURE_CLIENT_SECRET_${{env.ENVIRONMENT}}}}
          az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID_${{env.ENVIRONMENT}}}}
      - name: Package
        run: cd ./output && zip -r ../package.zip ./* && cd ..
      - name: Deploy to Azure function
        run: |
          az functionapp deployment source config-zip --verbose --ids \
            "/subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID_${{env.ENVIRONMENT}}}}/resourceGroups/${{env.RESOURCE_GROUP}}/providers/Microsoft.Web/sites/${{env.FUNCTIONAPP}}" --src package.zip